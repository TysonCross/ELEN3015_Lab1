%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 129.000000 245.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D47) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 129 245
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 129 245
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: AndaleMono
%!FontType1-1.0: AndaleMono 1.0000.2.0000
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
14 dict begin/FontName /AndaleMono def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /C put
dup 34 /O put
dup 35 /M put
dup 36 /P put
dup 37 /U put
dup 38 /T put
dup 39 /I put
dup 40 /N put
dup 41 /G put
dup 42 /E put
dup 43 /Q put
dup 44 /S put
dup 45 /L put
dup 46 /W put
dup 47 /H put
dup 48 /F put
dup 49 /A put
dup 50 /R put
dup 51 /X put
dup 52 /Y put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 0 1 index div -447 2 index div 1229 3 index div 2038 5 -1 roll div]cvx def
/sfnts [<


022546206861B00325B003253F2321381B2111592D2C2045B00325465058B0022546206861B00325B003253F2321381B2111592D2C00B00743B006430B2D2C8A10EC2D2CB00C4358211B2046B0005258B8FFF0381BB0103859592D2C20B0005558B8100063B003254564B00325456461B0005358B0021BB04061B00359254569535845441B2121591B21B0022545B00225456164B028515845441B212159592D2C21210C6423648BB84000622D2C21B08051580C6423648BB82000621BB200402F2B59B002602D2C21B0C051580C6423648BB81555621BB200802F2B59B002602D2C0C6423648BB84000626023212D2C4B5358B00425B00425496423456469B0408B6120B080626AB00225B00225618CB0462344218A10B046F6211B218A11231220392F592D2CB00225B002254964B0C05458B8FFF838B008381B2121592D2CB0134358031B02592D2CB0134358021B03592D2CB00A2B2310203CB0172B2D2CB00225B8FFF038B0282B8A102320D023B0102BB0054358C01B3C59201011B00012012D2C4B53234B515A58381B2121592D2C01B0022510D023C901B00113B0001410B0013CB001162D2C01B00013B001B0032549B0031738B001132D2C4B53234B515A5820458A60441B2121592D2C20392F2D00000200D8000003F50560000300070014B707010400050304002FCD2FCD002FCD2FCD31303311211125211121D8031DFD63021DFDE30560FAA0800460000200390000049805830007000A00D3408002080909010A03040409060907380901090A018100071400000709040908048105061405050608061806280603E806F80602020806011301060907370906080A93400237034703670377030400030307A70601060305040100120705010802A7050103080001090008020107040004030A060405090900050C0077020B0576022B2B01111239192F1217391217395F5E5D5F5D5F5E5D00183F3C3C3C3F5D3C392F5F5D3C1A4DFD3C11392B015F5E5D5F5D71872E184D2B087D10C487052E182B087D10C42B0705103C7DC407103C3C31302123032103230133130B010498AC9CFE319EAA01CDC556B9B801EEFE120583FCFA0248FDB80001007FFFE5042F059E00150083402707120109C71001881401880D01028802018708010B930BBE0C40080D360C0E930804009300BE15B8FFC04027080D3615139302130711010A15000C0B117D05400505150555056505040B03170B6E0216056C022B2B015F5E5D1A18104DED1910C518D619C55E5D00183FFDDE2BEDED3FFDDE2BEDED5D5D3130015F5D5D005D5E5D25062320001110002132161707262322021110213237042FA6DBFEEEFEE30114011B66C83D368DA8C3BE0181A3AB58730178016401580185342B8150FEE5FECEFDB46400010100000003E10583000B003A402209930602

070217022702030801020701080603030112060102077F00027F04400B006E020A046B022B2B011A18104DED10ED113939003F3C3F3C1239395F5E5D5F5D5F5D5D5F5D87052E2B877DC43130212301112311330111330410B6FE06A4B701FCA1045AFBA60583FBB004500002007FFFE5044A059E000B0015005AB506100D0F3600B8FFF0403A0D0F36281038108810A810E810F81006270C370C870CA70CE70CF70C0698060197000102109300040C9306130E7D0317036F02137D0916096C022B10ED2B10ED003FED3FED5F5D5D5D5D2B2B3130013212111002232202111012132011102122021110120264EDF9F8EEECF9F8ED0138FEC8989F9E059EFE89FE9AFE9CFE880177016501650178FAD7024C024DFECFFEE4FEE1FED30000020100000004250583000A001200574037181028100258106810781003010B936808780802000808091293000309120704170487040308020E7D040B097F0A4014046E02130A6B022B2B011A18104DFD3C10ED5F5E5D003F3FED12392F5F5DED3130015F5D71012132161514062B0111231333203534262B0101000166CBF4F3C5C9A4A4B201219D7CBA0583CCB3B4D7FD870308F2708A0002007FFEFC046F059E0015001F009A40690330090C36871B01081A181AC81AD81A0407161716C716D716040B170C270C370C670C04180628063806680604D80201021A930C0415139307021702020C0002110416930613081801071D011107111711021702117F04040900187D0F1D7D0940210F6F0220096C022B2B011A18104DED10EDC612392FED5F5E5D5E5D5D003FED3939D45F5E5DFDC63FED5F5D5D5D5E5D5D3130015D002B0506232227062322021110123332121110051633323725201110212202111012046F5755DC41271BECF9F8EDEDF9FEFC25683A45FE120138FEC8989F9EE91BF0070177016501650178FE89FE9AFDF89C920FDB024C024DFECFFEE4FEE1FED300000200D1000004960583000D00150098405C0D000D0C00810102140101020D0E930202001593060305010012581201070A170A870A970A0408027801010008011801020B02010D000802010D010202041200127D0A080A180A020E020E047F0540070A011200170A6F0216056B022B2B015F5E5D1A18104DFD3C5F5E5D10EDC61112392F5F5E5D1239395F5E5D5F5D5F5E5D5D003F3C3C3FED12392FED3987052E2B087D10C43130212301231123112132161514060725333236353421230496CDFE62B6A4018FC9E9AA95FEA2CF82A2FEE0D30281FD7F0583C3AE81C9246C8D6BEC000100E3FFE503FE059E002400E940A1880D0102C81901E80E010119060906811B19141B1B19081B01671B0103881B0102581B011714271402A809010388090101550901070927090267097709A709B709040215093509450985090403061B09



00>] def
/CharStrings 22 dict dup begin
/.notdef 0 def
/A 1 def
/C 2 def
/E 3 def
/F 4 def
/G 5 def
/H 6 def
/I 7 def
/L 8 def
/M 9 def
/N 10 def
/O 11 def
/P 12 def
/Q 13 def
/R 14 def
/S 15 def
/T 16 def
/U 17 def
/W 18 def
/X 19 def
/Y 20 def
/currency 21 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{0 -447 1229 2038}def
/UniqueID 4431224 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C92608F4984E4A5769B1336AE461E05CD208550769783E471D7C20DE95AFA010D2AD9299300D10F120B7BFC9377A50210C7A064B6A90F42D324E1B9573FB934E632F8DD5656C7927F4664A74D926FBDC3ADA9D0EECFBC54516B806154B02AA289F5FBC819B6B1644CA5503F50191D6B04CEE783507CA44AB0A062D44B7A34FE7CF5AB5D51B055FF534FA638C2FC130297E6C7D6799E4537989313E63C20B2C36FA4362671495EC22DFC559ECC9E5E96DD5745C61441670DE7F37DB7AF0D9072B1DEFC1040A1ED2F785DD454A3AE149791D40921EE1E6F1BED310A83822D6493B50652CA2B81DFEB9FF3A014DA1059A582F5F4351D7578803EED393CFE1CAC7C469B0F7036EDA19A60321F2112D917B01A9CB1D97D12025FD748E58B02AAE5F0C0DC06CEE4ADB74EF4298B113C86A1DFDD87CF45612316CCE69382A36DD7F8A4DA08D885343D059D3DC6FC2E248AC32FE7D923499A3066AACEDAC511EC602DA775A40E41456569E6CBDB9E4571F39EEF88B80F453FEFD7A3F73441D40F33483CADCDD619973729D58214B1094CBE7C8AFAFF3B43914DF2111385B282F2024CE4EBC42DFD99F0B855C94AF8BB9C0EC6FC5C01774E60CFB7676985A7E7A1F171878C33A75E256ADD623F8FEDBD06FD11C729C2288DC523CF98391372184D16F4D9CF9C01E71FDF576D90B350B0DA9AA03245AA053940BAD5C2FFBDE74FEE266175B48E89D2FC668A51F75F06CB8D7CCBA387EA4DBD1C3DFC789C5374BA3EF4EA12F9D7
9572E3184EAE4E81BCF18106032B080C61A9238009A9FCCA6E2C5BFD89B645D84DB5055DD3217856D9324B57096A0EBF505039BC382F21ECA34B25A383B6A39A136E71E3C1D44E8D846725BE33152ECDB618CF87A865C4536676FFD3F8337E7F74C437BB59CF8ADA118BF9008F2CB3FC2BAE245509C87160F7DD4514541C384E808A82ABC20918FC9C20CDF940B9A820FF7857FCBF48771C9E4ADDEB57FFFD18FC3E631D015D2445F8568C529A3227C554818005CCD00B5D1934563070133A6EBEEED0EF434A2C16CF58572202C7DA4FAF94C4EEC6CF3ABD562AB0B8E828CE09E161087037C40358518880A6B89198307B06E8B86CE9DCA5CC4533CD93A2D2C944704241F8D1DA5C081A55567F48AD397A82C7355CD6A98FC9988A8427F52994693C70DF878498C85944FE4268FB29FC2984E512381AE4CF64A6F9E3343651643F3289E5D8013AAF79554BFFAA8FFA37C194F551BBD9F370E8C7BC5407FBDDFE38F43340E2C11797D1F7C35ACB3FE488EA63E25D2F97139BBCBE4569F48F5A4B7691C85FEC0876E226F89D2585CA8F0B82DF81151325BDD8B6144BAE63E0A23F33ECE28D9E585E8B95C5B68200FF2760DFE95F9EE6E2A598BCB4B72296F2A53F05A604698A3CE5C11E64E84A51DD2033D1836FE6DE542020A3A56E2B9245C03E6E7FB3D288D25F136631BEBE1DEF4E8A78B9BAE4B8B040ADBDDF8069E86070F34A87DB9CC36E8D41DE99E5A38AF504552B32EED3614750873C4FF8DD70A3052026592FE9FE958F8A9C1D8D74CBD9397EBB38C1E816A56A5C4A6D67310CA88612F3B72A5E8DB0D77F0B146E148480E388C8BFCBC4038294F5C8BA2D575C5792222D828068D406F577DEEDA702AF3BDE400D80C84223F6863BAF2B112FB3A4DD17310E99AAFF83F9AFD020283264EB2C32255BC379E87394F41B0D648EDEE6D18A34B8F45826273DA26216DE45C5986502E84A0BD1A8DE42065E68259864E4C41B510B8A7D61B8CD8F64060B3C374BF74D5C601ECAAEEE362DACBF3B3015E1DBAA2EBD2A2FE8C3CF263192B8D70CB6D2FDF8D894F853379FC58FFAAD4F655BCD3546ACE17A763519C644BB551D829F09D1C6E6EAB1164538710DBA4FF2595E8388FA86B024F1423C46AE22D9EA1884CF6F8ED6188108E2F789445977547153CE1D1C18E3BCF74DA14255D71E4DA7C3B112E931D9D099D96C726E8B9CFC67060DFAF5F254BA7E578F5BE85655BFB92807F66F5C71D59367E04CAAEBE5F14F98AEEAD51AE605225B332A11A921DB31229DA86B94DD709913D5E2EF172A417DDAB78DAE6201BBFA0A24CEF7E8114C747DA014E7905AB8EC5C4588AF25615549BC9500927C173EB1C7F15D4A086A24B8BA8ED2EE431BC03AABE0B049FBFF708F3079425A80F579046F66CC9C65794E571B9915FC5F83B562D4892A017557F9326D2749

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/AndaleMono cguidfix
/F1.1/AndaleMono renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0 sc
q
0 0 129 245 rc
1 0 0 -1 64.464569 122.63779 cm
/F1.1[ 16 0 0 -16 0 0]sf
-47.605469 -102 m
(!"#$%&')[ 13.601562 13.601562 13.601562 13.601562 13.601562 13.601562 0.000000 ] xS
-47.605469 -84 m
(\(\)*+%'$)[ 13.601562 13.601562 13.601562 13.601562 13.601562 13.601562 0.000000 ] xS
-47.605469 -66 m
(#*\(&',%)[ 13.601562 13.601562 13.601562 13.601562 13.601562 13.601562 0.000000 ] xS
-47.605469 -48 m
(,*-*,,.)[ 13.601562 13.601562 13.601562 13.601562 13.601562 13.601562 0.000000 ] xS
-47.605469 -30 m
('&/"%&/)[ 13.601562 13.601562 13.601562 13.601562 13.601562 13.601562 0.000000 ] xS
-47.605469 -12 m
(*,"0&.1)[ 13.601562 13.601562 13.601562 13.601562 13.601562 13.601562 0.000000 ] xS
-47.605469 6 m
(2*&/1&%)[ 13.601562 13.601562 13.601562 13.601562 13.601562 13.601562 0.000000 ] xS
-47.605469 24 m
(,*2,*3$)[ 13.601562 13.601562 13.601562 13.601562 13.601562 13.601562 0.000000 ] xS
-47.605469 42 m
(*!&&/*2)[ 13.601562 13.601562 13.601562 13.601562 13.601562 13.601562 0.000000 ] xS
-47.605469 60 m
(*12*#1\()[ 13.601562 13.601562 13.601562 13.601562 13.601562 13.601562 0.000000 ] xS
-47.605469 78 m
(4$2"\)21)[ 13.601562 13.601562 13.601562 13.601562 13.601562 13.601562 0.000000 ] xS
-47.605469 96 m
(##'\(\)-1)[ 13.601562 13.601562 13.601562 13.601562 13.601562 13.601562 0.000000 ] xS
-47.605469 114 m
(\(\)%1\)*,)[ 13.601562 13.601562 13.601562 13.601562 13.601562 13.601562 0.000000 ] xS
ep
end
%%Trailer
%%EOF
